/**********************************************************************************************************************
*   Interrupt control header file
*   this file contains all interrupt related methods and variables
*   author: w. devries
***********************************************************************************************************************/
#ifndef INTC_H_
#define INTC_H_

// Header Files
// ====================================================================================================================
#include "xscugic.h"
#include "xiicps.h"
#include "xttcps.h"

#include "../main.h"

/* --------- Constants --------- */

/* The following constants map to the XPAR parameters created in the
 * xparameters.h file. They are only defined here such that a user can easily
 * change all the needed parameters in one place. */

/* Interrupt controller device id */
#define INTC_DEVICE_ID 		XPAR_PS7_SCUGIC_0_DEVICE_ID

/* Interrupt IDs */
#define GYR_INT_ID 			XPAR_FABRIC_SYSTEM_CORE1_NIRQ_INTR	/* Id of interrupt generated by IMU via JB4 pin */
#define IIC_INT_VEC_ID		XPAR_XIICPS_0_INTR					/* Id of interrupt generated by I2C when data is being processed */


// Prototype definitions
// ====================================================================================================================

/**
 *
 * This function setups the interrupt system such that interrupts can occur.
 * This function is application specific since the actual
 * system may or may not have an interrupt controller.
 *
 * @return XST_SUCCESS if successful, otherwise XST_FAILURE.
 *
 * @note None.
 */
int 	SetupInterruptSystem();

/**
 *
 * This function setups the interrupt system such that interrupts can occur
 * for the IIC.  This function is application specific since the actual
 * system may or may not have an interrupt controller.  The IIC could be
 * directly connected to a processor without an interrupt controller.  The
 * user should modify this function to fit the application.
 *
 * @param IicPsPtr contains a pointer to the instance of the Iic
 *        which is going to be connected to the interrupt controller.
 *
 * @return XST_SUCCESS if successful, otherwise XST_FAILURE.
 *
 * @note None.
 */
int 	SetupIICInterruptSystem();

/**
 *
 * This function setups the interrupt system such that interrupts can occur
 * for the IMU.  This function is application specific since the actual
 * system may or may not have an interrupt controller.
 *
 * @return XST_SUCCESS if successful, otherwise XST_FAILURE.
 *
 * @note None.
 */
int 	SetupIMUInterruptSystem();

/**
 *
 * This function is the handler which performs processing to handle data events
 * from the IIC.  It is called from an interrupt context such that the amount
 * of processing performed should be minimized.
 *
 * @param CallBackRef contains a callback reference from the driver, in
 *        this case it is the instance pointer for the IIC driver.
 * @param Event contains the specific kind of event that has occurred.
 *
 * @return None.
 *
 * @note None.
 */
void Handler(void *CallBackRef, u32 Event);

/**
 *
 * This function is the handler which is used when the Gyro generates an interrupt.
 * It does this at 238Hz. This method then updates the EAGLE FSM.
 *
 * @param InstancePtr is a pointer to the XIicPs instance.
 */
void 	Int_gyr(void *InstancePtr);

/* -------- Global variables -------- */
XScuGic InterruptController; /* Instance of the Interrupt Controller */

/*
 * The following counters are used to determine when 
 * the entire buffer has been sent and received.
 */
volatile u32 SendComplete;
volatile u32 RecvComplete;
volatile u32 TotalErrorCount;
int Status;

#endif /* INTC_H_ */
