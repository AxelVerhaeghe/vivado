#ifndef EAGLE4_H
#define EAGLE4_H

#define NX 10
#define NX_REDUCED 9
#define NU 3
#define NY 6


/* Initializing the controller, this has to run before flying */
void attitude_controller_init(void);
void imu_measurements_init(void);
void attitude_reference_init(void);

/* Getters */
float * get_attitude_control_action(void);
float * get_attitude_state_estimate(void);
float * get_attitude_reference(void);
float * get_imu_measurements(void);
float * get_imu_measurements_reduced(void);
float * get_control_to_voltage(void);

/* Loading the IMU measurements in imu_measurements */
void set_imu_measurements(float * q, float * w);
void set_imu_measurements_reduced(float * q, float * w);

/* Calculating attitude_reference from the values received from the remote controller */
void set_attitude_reference(const float * remote_controller_values);
void attitude_state_reduced_to_full(void);


/**
 * The main control function.
 * This function calculates the control actions based on an attitude reference,
 * the measurements from the IMU and the estimated state.
 * After computing the control actions it calculates the estimated state again. 
 */
void compute_ctrl_action(void);

/**
 *   Converts the control action vector (3x1) to the 4 required voltages. [u(3x1) --> v(4x1)]
 *   The common factor (thrust) is calculated by the altitude controller
 */
void control_to_voltage(float rot_x,float rot_y,float rot_z,float alt_thrust);

#endif
